# Build Stage
# Use a Go base image with the desired version to compile the source code.
FROM golang:1.24 as builder

# Set the working directory inside the container.
WORKDIR /app

# Copy the go.mod and go.sum files to download dependencies first.
#COPY go.mod go.sum ./

# Download the Go modules.
# This step is cached by Docker, speeding up subsequent builds.
#RUN go mod download

# Copy the entire source code into the container.
#COPY . .

# Build the binary.
# CGO_ENABLED=0 creates a statically linked binary, which is important for minimal images.
# GOOS and GOARCH specify the target operating system and architecture.
# -o /usr/local/bin/rancher-webhook specifies the output path and name of the binary.
#RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-s -w' -o /usr/local/bin/rancher-webhook ./

COPY webhook /usr/local/bin/rancher-webhook
# Final Stage
# Use a minimal base image like scratch, which contains nothing, for the final image.
FROM alpine:3.20

# Copy the binary from the 'builder' stage to the final image.
COPY --from=builder /usr/local/bin/rancher-webhook /usr/local/bin/rancher-webhook
#COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Expose the port on which the webhook will listen.
EXPOSE 9443

# Set the command to run the binary when the container starts.
ENTRYPOINT ["/usr/local/bin/rancher-webhook"]

